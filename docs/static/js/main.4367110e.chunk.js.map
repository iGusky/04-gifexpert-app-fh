{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategorias","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","handleInputChange","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","GifExpertApp","categorias","categoria","ReactDOM","render","document","getElementById"],"mappings":"mMAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAETC,mBAAS,IAFA,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAmB9C,OACE,sBAAMC,SAZa,SAACC,GACpBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAO,IAC1BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,MAOhB,SACE,uBACEO,KAAO,OACPC,MAAST,EACTU,SAAY,SAACP,GAAD,OApBQ,SAACA,GACzBF,EAAcE,EAAEQ,OAAOF,OAmBAG,CAAkBT,S,QC1BhCU,EAAc,SAAC,GAAuB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAEvC,OACE,sBAAKC,UAAY,yCAAjB,UACE,qBAAKC,IAAQF,EAAMG,IAAQJ,IAC3B,4BAAKA,Q,uBCPEK,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAEfN,EAFe,iDAEkCO,UAAUF,GAF5C,+DAIFG,MAAMR,GAJJ,cAIfS,EAJe,gBAKEA,EAAKC,OALP,uBAKbC,EALa,EAKbA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHhB,GAAKgB,EAAIhB,GACTC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QAXrB,kBAedY,GAfc,4CAAH,sDCMPK,EAAU,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAAe,ECHb,SAAEA,GAAe,IAAD,EAEhBtB,mBAAS,CACjC4B,KAAM,GACNO,SAAS,IAJ+B,mBAEnCC,EAFmC,KAE5BC,EAF4B,KAmB1C,OAZAC,qBAAU,WAERjB,EAASC,GACNiB,MAAM,SAAAR,GACLM,EAAS,CACTT,KAAMG,EACNI,SAAS,SAIb,CAAEb,IAEGc,EDJ2BI,CAAclB,GAAlCU,EAZyB,EAY9BJ,KAAaO,EAZiB,EAYjBA,QAEpB,OACA,qCACI,oBAAIjB,UAAU,oCAAd,SAAoDI,IAGlDa,GAAW,mBAAGjB,UAAU,mCAAb,yBAEb,qBAAKA,UAAU,YAAf,SAEQc,EAAOF,KAAI,SAACC,GACR,OAAO,cAAC,EAAD,eAECA,GADGA,EAAIhB,aEMpB0B,EAjCM,WAAK,MAIYzC,mBAAS,CAAC,eAJtB,mBAIjB0C,EAJiB,KAIL3C,EAJK,KAaxB,OAAQ,qCACN,8CACA,cAAC,EAAD,CAAaA,cAAkBA,IAC/B,uBAEA,6BAEI2C,EAAWZ,KAAK,SAAAa,GAEd,OAAO,cAAC,EAAD,CAELrB,SAAWqB,GADHA,Y,MCnBpBC,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.4367110e.chunk.js","sourcesContent":["import React from 'react'\nimport { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({setCategorias}) => {\n\n  const [inputValue, setInputValue ] = useState('');\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  }\n \n  const handleSubmit = (e) =>{\n    e.preventDefault();\n\n    if(inputValue.trim().length>2){\n      setCategorias( cats => [ inputValue, ...cats]);\n      setInputValue('');\n    }\n\n\n  }\n\n  return (\n    <form onSubmit={ handleSubmit } >\n      <input\n        type = \"text\"\n        value = {inputValue}\n        onChange = {(e) => handleInputChange(e)}\n      />\n    </form>\n  )\n}\n\nAddCategory.propTypes = {\n  setCategorias: PropTypes.func.isRequired\n};\n","import React from 'react'\n\nexport const GifGridItem = ( {id, title, url} ) => {\n\n  return (\n    <div className = \"card animate__animated animate__fadeIn\">\n      <img src = { url } alt = { title } />\n      <p>{ title }</p>\n    </div>\n  )\n}\n","export const getGifs = async ( category ) => {\n\n  const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=r7bMi2ZYLEHBDsK7ED5OB48SMjKna1bE`;\n  \n  const resp = await fetch(url);\n  const { data } = await resp.json();\n\n  const gifs = data.map( img => {\n      return {\n          id : img.id,\n          title: img.title,\n          url: img.images?.downsized_medium.url\n      }\n  });\n  \n  return gifs;\n};","import React from 'react'\n// import {useState, useEffect} from 'react';\n// import { getGifs } from '../helpers/getGifs';\nimport { GifGridItem } from './GifGridItem';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\nexport const GifGrid = ({ category }) => {\n\n    //*Antes de usar Customhooks\n    // const [images, setImages] = useState([]);\n    //Con este codigo hacemos que el getGifs se ejecute solo cuando se rendereiza por primera vez.\n    // useEffect( () => {\n    //     getGifs( category )\n    //         .then( imgs => setImages(imgs));\n    // }, [ category ]); //Si la categoria cambia, vuelve a ejecutar el efecto interno.\n\n    //* Usando Customhooks\n    //Se renombra data a images\n    const {data:images, loading } = useFetchGifs( category );\n\n    return (\n    <>\n        <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>\n\n        {/* Forma corta de un if */}\n        { loading && <p className=\"animate__animated animate__flash\">Cargando...</p>}\n\n        <div className=\"card-grid\">\n            {\n                images.map((img) => {\n                    return <GifGridItem\n                        key = {img.id}\n                        {...img}\n                    />\n                })\n            }\n        </div>\n    </>\n    )\n}","import { useEffect, useState } from \"react\"\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = ( category ) => {\n  \n  const [state, setState] = useState({\n    data: [],\n    loading: true\n  });\n\n  useEffect(() => {\n\n    getGifs( category )\n      .then( img =>{ \n        setState({\n        data: img,\n        loading: false\n      })} )\n\n\n  },[ category ]);\n\n  return state;\n}","import { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = () =>{\n\n  // const categorias = ['Evangelion', 'Sailor Moon', 'Star Wars'];\n\n  const [categorias, setCategorias] = useState(['Evangelion']);\n\n  //const handleAdd = () => {\n    //Primera forma de agregarlo\n   // setCategorias ([...categorias, 'HunterXHunter']);\n    //Forma alternativa\n    //setCategorias( cats => [--cats, 'HunterXHunter']);\n  //}\n\n  return (<>\n    <h2>GifExpertApp</h2>\n    <AddCategory setCategorias = { setCategorias } />\n    <hr></hr>\n\n    <ol>\n      {\n        categorias.map( categoria => {\n          // return <li key={ categoria }>{ categoria }</li>\n          return <GifGrid \n            key = { categoria }\n            category={ categoria }/>\n        })\n      }\n    </ol>\n\n    {/* <button onClick={handleAdd}>agregar</button> */}\n  </>);\n};\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\n\nReactDOM.render(\n  \n    <GifExpertApp />,\n  \n  document.getElementById('root')\n);\n"],"sourceRoot":""}